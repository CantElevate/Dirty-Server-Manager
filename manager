#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
# Absolute path to this script, e.g. /home/user/bin/foo.sh
SCRIPT=$(readlink -f "$0")
# Absolute path this script is in, thus /home/user/bin
SCRIPTPATH=$(dirname "$SCRIPT")
#http://stackoverflow.com/questions/242538/unix-shell-script-find-out-which-directory-the-script-file-resides

#Pull values from config INI
source <(grep = manager-config.ini)
#sed "s/;/#/g" manager-config.ini | source /dev/stdin
MAX_PLAYERS=`echo ${MAX_PLAYERS} | sed -e 's/\r//g'`
GALAXY=`echo ${GALAXY} | sed -e 's/\r//g'`
PARAMS=`echo ${PARAMS} | sed -e 's/\r//g'`
PORT=`echo ${PORT} | sed -e 's/\r//g'`
LOG_ROTATION=`echo ${LOG_ROTATION} | sed -e 's/\r//g'`
AutoRestart=`echo ${AutoRestart} | sed -e 's/\r//g'`
DAILYRESTART=`echo ${DailyRestart} | sed -e 's/\r//g'`
BETA=`echo ${BETA} | sed -e 's/\r//g'`
WEBPORT=`echo ${WEBPORT} | sed -e 's/\r//g'`
IPAddress=`echo ${IPAddress} | sed -e 's/\r//g'`

# Standard Config - Dont touch
TMUX_SESSION=${GALAXY}_Tmux
INSTALL_DIR=$SCRIPTPATH/serverfiles
STEAM_DIR=$SCRIPTPATH/steamcmd
# Colors
WHITE='\033[1;37m'
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
PURPLE='\033[1;35m'
NOCOLOR='\033[0m'
# Static - Dont change these
VERSION=1.1.3
APPID=565060
SERVER=AvorionServer
T='tmux send-keys -t '${TMUX_SESSION}':0.0'
# Auto Restart
CRONJOB='0,5,10,15,20,25,30,35,40,45,50,55 * * * * '${SCRIPTPATH}'/manager status CRON >> '${SCRIPTPATH}'/avorion-manager/logs/$(/bin/date +\%d-\%m-\%Y)_status.log'
CRONDAILYRESTART_15='41 11,23 * * * '${SCRIPTPATH}'/manager send CRON "/say Restarting server in 15 Minutes!"'
CRONDAILYRESTART_10='46 11,23 * * * '${SCRIPTPATH}'/manager send CRON "/say Restarting server in 10 Minutes!"'
CRONDAILYRESTART_5='51 11,23 * * * '${SCRIPTPATH}'/manager send CRON "/say Restarting server in 5 Minutes!"'
CRONDAILYRESTART_1='55 11,23 * * * '${SCRIPTPATH}'/manager send CRON "/say Restarting server in 1 Minute!"'
CRONDAILYRESTART_NOW='56 11,23 * * * '${SCRIPTPATH}'/manager restart CRON >> '${SCRIPTPATH}'/avorion-manager/logs/$(/bin/date +\%d-\%m-\%Y)_status.log'
CRONSECTORDATA='0 12,0 * * * nice -n 10 '${SCRIPTPATH}'/avorion-manager/GetSectorData.sh '${HOME}'/.avorion/galaxies'
CRONPLAYERATA='0,30 * * * * nice -n 15 '${SCRIPTPATH}'/avorion-manager/GetPlayerData.sh '${HOME}'/.avorion/galaxies'
RUN_BY=$2

DynamicEcho() {
  # Second Argument used to detect who were echoing too.
  if [ "$2" = "CRON" ]; then
      if [ -z ${3+x} ]; then
          echo -e -n $(date +"%F %H-%M-00| "); echo -e '[Manager]: '$1 | sed -r 's/'$(echo -e "\033")'\[[0-9]{1,2}(;([0-9]{1,2})?)?[mK]//g'
      fi
  elif [ "$2" = "PHP" ]; then
      echo -e $1'\n' | sed -r 's/'$(echo -e "\033")'\[[0-9]{1,2}(;([0-9]{1,2})?)?[mK]//g'
  else
      if [ "$3" = "DONTLOG" ]; then
        echo -en "$1"
      else
        echo -e "${WHITE}[Manager]${NOCOLOR}: $1"
      fi
  fi
}
GenerateBrowser(){
  OnlineCount=$(netstat -tlunp 2>/dev/null | grep -iv ':270'|grep -i avorion|wc -l)
  OnlinePlayers="$OnlineCount/$MAX_PLAYERS"
  php -f ${SCRIPTPATH}/avorion-manager/BannerGenerator.php "$1" "${IPAddress}" "${GALAXY}" "${OnlinePlayers}"
}
DeleteCronJobs(){
  crontab -l | grep -v "${SCRIPTPATH}/manager"  | crontab -
  crontab -l | grep -v "${SCRIPTPATH}/avorion-manager"  | crontab -
}
CreateCronJobs(){
  if [ "${DAILYRESTART}" = true ]; then
    (crontab -l ; echo "${CRONDAILYRESTART_15}") | crontab -
    (crontab -l ; echo "${CRONDAILYRESTART_10}") | crontab -
    (crontab -l ; echo "${CRONDAILYRESTART_5}") | crontab -
    (crontab -l ; echo "${CRONDAILYRESTART_1}") | crontab -
    (crontab -l ; echo "${CRONDAILYRESTART_NOW}") | crontab -
  fi
  (crontab -l ; echo "${CRONSECTORDATA}") | crontab -
  (crontab -l ; echo "${CRONPLAYERATA}") | crontab -
  (crontab -l ; echo "${CRONJOB}") | crontab -
}
LogToManagerLog(){
  echo -e -n $(date +"%F %H-%M-%S| ") >> ${SCRIPTPATH}/avorion-manager/logs/$(/bin/date +\%d-\%m-\%Y)_manager.log
  echo -e "[Manager]: $1" >> ${SCRIPTPATH}/avorion-manager/logs/$(/bin/date +\%d-\%m-\%Y)_manager.log

  #Status.log rotation
  find ${SCRIPTPATH}/avorion-manager/logs/*_manager.log -mtime +${LOG_ROTATION} -type f -delete 2> /dev/null
  find ${SCRIPTPATH}/avorion-manager/logs/*_status.log -mtime +${LOG_ROTATION} -type f -delete 2> /dev/null
  find ${SCRIPTPATH}/avorion-manager/logs/*_playerchat.log -mtime +${LOG_ROTATION} -type f -delete 2> /dev/null
}
# Main: start, stop, kill, restart, status, steam, attach, help*
case $1 in
	"start")
    LogToManagerLog "Ran Start command.";
    # remove the cron job just incase
    DeleteCronJobs;
    cp serverfiles/linux64/steamclient.so serverfiles/steamclient.so
    #if [ ! -f bin/${SERVER} ]; then
      #cp serverfiles/bin/AvorionServer serverfiles/bin/${SERVER}
    #fi
		if tmux new -d -c ${INSTALL_DIR} -s ${TMUX_SESSION} bin/${SERVER} --port ${PORT} --galaxy-name ${GALAXY} --max-players ${MAX_PLAYERS}  ${PARAMS} 2> /dev/null
		then
      if [ ! -f ${SCRIPTPATH}'/console.log' ]; then
        touch ${SCRIPTPATH}'/console.log'
      fi
      cat ${SCRIPTPATH}'/console.log' | grep '^<.*>' | grep -v '^<Rusty>' >> ${SCRIPTPATH}/avorion-manager/logs/$(/bin/date +\%d-\%m-\%Y)_playerchat.log
      #Start loging console into console.log.
      tmux pipe-pane -o -t ${TMUX_SESSION} "cat > ${SCRIPTPATH}/console.log"
      DynamicEcho "starting ${PURPLE}${SERVER}${NOCOLOR} on ${YELLOW}${PORT}${NOCOLOR}" "${RUN_BY}"
			if pidof ${SERVER} > /dev/null;
			then
        DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} has started with pid ${YELLOW}$(pidof ${SERVER})${NOCOLOR}" "${RUN_BY}"
        DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} has started with params: ${PARAMS}" "${RUN_BY}"
        VER=`wget -O - -o /dev/null https://api.github.com/repos/dirtyredz/Dirty-Server-Manager/releases/latest | grep tag_name | sed -e 's/.*://g' -e 's/"//g' -e 's/,//g' | tr -d '[:blank:]'`
        if [ "${VER}" != "${VERSION}" ]; then
          DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Dirty Server Manager is NOT Up To Date!" "${RUN_BY}"
        else
          DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Dirty Server Manager is Up To Date!" "${RUN_BY}"
        fi
        #Generate jpg
        GenerateBrowser 'Online';
        CreateCronJobs;
      else
        DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} could not be started!" "${RUN_BY}"
			fi
		else
			DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} is already running!" "${RUN_BY}"
		fi
	;;
	"stop")
    LogToManagerLog "Ran Stop command.";
    # remove the cron job just incase
    DeleteCronJobs;
    #Generate Offline jpg
    GenerateBrowser 'Offline';

		if pidof ${SERVER} > /dev/null
		then
			DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Saving..." "${RUN_BY}"

      D='Server Time is: '"$(date +"%F %H-%M-%S")"
      #Send commands to the console
      $T '/echo '"${D}" C-m
      $T /save C-m
      time=0
      while [ $time -lt 60 ]; do

        PlayerMemory=$(cat ${SCRIPTPATH}'/console.log' | awk "/${D}/,/All sectors saved successfully/" | grep 'All sectors saved successfully')
        if [ "${PlayerMemory}" ]; then
          break;
        fi
        let time++
        sleep 1
        DynamicEcho "\rSaving... ${time}" "${RUN_BY}" "DONTLOG"
      done

      DynamicEcho "\r" "${RUN_BY}" "DONTLOG"
      DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Has been saved." "${RUN_BY}"
      DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Stopping...." "${RUN_BY}"
			$T /stop C-m
      time=0
      while [ $time -lt 120 ]; do
        SHUTDOWN=$(cat ${SCRIPTPATH}'/console.log' | awk "/${D}/,/Server shutdown successful/" | grep 'Server shutdown successful')
        if [ "${SHUTDOWN}" ] || [ "$( ps ax | grep ${SERVER} | grep -v grep | grep tmux | wc -l)" ]; then
          DynamicEcho "\r" "${RUN_BY}" "DONTLOG"
          DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} has been stopped." "${RUN_BY}"
          break;
        fi
        let time++
        sleep 1
        DynamicEcho "\rStopping... ${time}" "${RUN_BY}" "DONTLOG"
      done
      DynamicEcho "\r" "${RUN_BY}" "DONTLOG"
      DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} is being forcibly closed! Just incase." "${RUN_BY}"
      if ! kill $(pidof ${SERVER}) > /dev/null 2>&1; then
        DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Could not send SIGTERM to Server Process." "${RUN_BY}"
        sleep 1
        tmux kill-session -t ${TMUX_SESSION}
      fi

    else
      DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} is not running currently!" "${RUN_BY}"
		fi
	;;
  "send")
    LogToManagerLog "Ran Send command.";
		if pidof ${SERVER} > /dev/null
		then
      if [ -z ${3+x} ]; then
        echo $2
        $T "$2" C-m
      else
        echo $3
        $T "$3" C-m
      fi
		else
			DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} is not running!" "${RUN_BY}"
		fi
	;;
	"attach")
    LogToManagerLog "Ran Attach command.";
		if pidof ${SERVER} > /dev/null
		then
			DynamicEcho "press ${RED}Ctrl+B${NOCOLOR} then ${RED}D${NOCOLOR} to detach. Confirm to continue..." "${RUN_BY}"
			read -n 1 -s
			tmux a -t ${TMUX_SESSION}
		else
			DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} is not running!" "${RUN_BY}"
		fi
	;;
	"restart")
    LogToManagerLog "Ran Restart command.";
		DynamicEcho "restarting ${PURPLE}${SERVER}${NOCOLOR}..." "${RUN_BY}"
    OLDPID=$(pidof ${SERVER})
		$0 stop "${RUN_BY}"
    sleep 90
		$0 start "${RUN_BY}"
    NEWPID=$(pidof ${SERVER})
    if [ pidof ${SERVER} > /dev/null ] && [ OLDPID != NEWPID ]; then
      DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} has successfully restarted!" "${RUN_BY}"
    else
      DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} attempting restart of the server." "${RUN_BY}"
    fi
	;;
	"status")

    LogToManagerLog "Ran Status command.";
		if pidof ${SERVER} > /dev/null
		then
            # Generate date for a unique grep search
            D='Server Time is: '"$(date +"%F %H-%M-%S")"
            #Send commands to the console
            $T '/echo '"${D}" C-m
            $T /players C-m
            $T /status C-m
            time=0
            success=false

            #First Try
            while [ $time -lt 20 ]; do
              PlayerMemory=$(awk "/${D}/,/min. update/" /proc/`pidof ${SERVER}`/fd/3 | grep 'players in memory')
              if [ "${PlayerMemory}" ]; then
                success=true
                break;
              fi
              let time++
              sleep 1
              DynamicEcho "\rTrying... ${time}" "${RUN_BY}" "DONTLOG"
            done

            #Second Try
            if [ "${success}" = false ]; then
              DynamicEcho "\r" "${RUN_BY}" "DONTLOG"
              DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Unable to retrieve a status update from the server. Trying again..." "${RUN_BY}"
              D='Server Time is: '"$(date +"%F %H-%M-%S")"
              #Send commands to the console
              $T '/echo '"${D}" C-m
              $T /players C-m
              $T /status C-m
              time=0
              while [ $time -lt 20 ]; do
                PlayerMemory=$(cat /proc/`pidof ${SERVER}`/fd/3 | awk "/${D}/,/min. update/" | grep 'players in memory')
                if [ "${PlayerMemory}" ]; then
                  success=true
                  break;
                fi
                let time++
                sleep 1
                DynamicEcho "\rTrying... ${time}" "${RUN_BY}" "DONTLOG"
              done
            fi

            #Failure = Saving
            if [ "${success}" = false ]; then
              DynamicEcho "\r" "${RUN_BY}" "DONTLOG"
              DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Unable to retrieve a status update from the server. Saving..." "${RUN_BY}"
              D='Server Time is: '"$(date +"%F %H-%M-%S")"
              #Send commands to the console
              $T '/echo '"${D}" C-m
              $T /save C-m
              time=0
              while [ $time -lt 60 ]; do
                PlayerMemory=$(cat ${SCRIPTPATH}'/console.log' | awk "/${D}/,/Triggered saving of all server data/" | grep 'Triggered saving of all server data')
                if [ "${PlayerMemory}" ]; then
                  DynamicEcho "\r" "${RUN_BY}" "DONTLOG"
                  DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Saved, Recieved server response." "${RUN_BY}"
                  exit 1
                  break;
                fi
                let time++
                sleep 1
                DynamicEcho "\rSaving... ${time}" "${RUN_BY}" "DONTLOG"
              done
            fi

            #Complete Failure Restart
            if [ "${success}" = false ]; then
              DynamicEcho "\r" "${RUN_BY}" "DONTLOG"
              DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Unable to retrieve a status or save response from the server." "${RUN_BY}"
              if [ "$AutoRestart" = true ]; then
                DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} will restart the server." "${RUN_BY}"
                $0 restart "${RUN_BY}"
                exit 1
              fi

            else
              DynamicEcho "\r" "${RUN_BY}" "DONTLOG"
            fi


            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} is running with pid ${YELLOW}$(pidof ${SERVER})${NOCOLOR}." "${RUN_BY}"
            #Get and display players online info
            ServerTime=$(grep "${D}" ${SCRIPTPATH}'/console.log' | sed -e 's/\/echo//g' | tail -n 1)
            PlayerMemory=$(awk "/${D}/,/min. update/" /proc/`pidof ${SERVER}`/fd/3 | grep 'players in memory' | sed -e 's/.*| //g')
            FactionsMemory=$(awk "/${D}/,/min. update/" /proc/`pidof ${SERVER}`/fd/3 | grep 'factions in memory' | sed -e 's/.*| //g')
            SectorsMemory=$(awk "/${D}/,/min. update/" /proc/`pidof ${SERVER}`/fd/3 | grep 'sectors in memory' | sed -e 's/.*| //g')
            ScriptsMemory=$(awk "/${D}/,/min. update/" /proc/`pidof ${SERVER}`/fd/3 | grep 'Memory used by scripts' | sed -e 's/.*| //g')
            ServerLoad=$(awk "/${D}/,/min. update/" /proc/`pidof ${SERVER}`/fd/3 | grep 'server load' | sed -e 's/ 0%/ 0.01%/g' -e 's/.*| //g')
            SectorsUpdate=$(grep -A 15 "${D}" ${SCRIPTPATH}'/console.log' | grep 'Sectors Updated' | tail -n 1 | sed -e 's/.*| //g')
            AvgUpdate=$(awk "/${D}/,/min. update/" /proc/`pidof ${SERVER}`/fd/3 | grep 'avg. update' | sed -e 's/.*| //g')
            MaxUpdate=$(awk "/${D}/,/min. update/" /proc/`pidof ${SERVER}`/fd/3 | grep 'max. update' | sed -e 's/.*| //g')
            MinUpdate=$(awk "/${D}/,/min. update/" /proc/`pidof ${SERVER}`/fd/3 | grep 'min. update' | sed -e 's/.*| //g')
            Players=$(awk "/${D}/,/online players/" /proc/`pidof ${SERVER}`/fd/3 | grep 'online players (' | sed -e 's/online players (//' -e 's/).*//' -e 's/.*| //g' | tr -d '[:blank:]')
            PlayersNames=$(awk "/${D}/,/online players/" /proc/`pidof ${SERVER}`/fd/3 | grep 'online players ('| sed -e 's/.*://' | tr -d '[:blank:]')
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} is hosting galaxy: ${GALAXY}" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} ${ServerTime}" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} ${PlayerMemory}" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} ${FactionsMemory}" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} ${SectorsMemory}" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} ${ScriptsMemory}" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} ${ServerLoad}" "${RUN_BY}"
            if [ -z ${SectorsUpdate+x} ]; then
              DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} ${SectorsUpdate}" "${RUN_BY}"
            fi
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} ${AvgUpdate}" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} ${MaxUpdate}" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} ${MinUpdate}" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Players Online: ${Players}/${MAX_PLAYERS}" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} Players: ${PlayersNames}" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} `free -m | awk '/Mem:/ { print "Memory(mb)-Total:"$2",Used:"$3",Free:"$4",Cache:"$6 }'`" "${RUN_BY}"
            DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} CPU Usage: `top -bn 2 -d 1 | grep '^%Cpu' | tail -n 1 | awk '{print $2+$4+$6}'`" "${RUN_BY}"

            #Status.log rotation
            find ${SCRIPTPATH}/avorion-manager/logs/*_manager.log -mtime +${LOG_ROTATION} -type f -delete 2> /dev/null
            find ${SCRIPTPATH}/avorion-manager/logs/*_status.log -mtime +${LOG_ROTATION} -type f -delete 2> /dev/null
            find ${SCRIPTPATH}/avorion-manager/logs/*_playerchat.log -mtime +${LOG_ROTATION} -type f -delete 2> /dev/null

            #Generate data for the browser
            GenerateBrowser 'Online';
    else
      GenerateBrowser 'Offline';
      if [ "${RUN_BY}" = "CRON" ]; then
        DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} has detected a crash." "${RUN_BY}"
        if [ "$AutoRestart" = true ]; then
          DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} will restart the server." "${RUN_BY}"
          $0 start "${RUN_BY}"
        fi
      else
        DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} is not running." "${RUN_BY}"
      fi
    fi
	;;
	"update")
    LogToManagerLog "Ran Update command.";
		if pidof ${SERVER} > /dev/null
		then
			DynamicEcho "${PURPLE}${SERVER}${NOCOLOR} should not be running while updating." "${RUN_BY}"
		else
			DynamicEcho "steamcmd will now perform an update." "${RUN_BY}"
      case $BETA in
        (true)    DynamicEcho "Updating with Beta version..." "${RUN_BY}";;
        (false)   DynamicEcho "Updating with Normal version..." "${RUN_BY}";;
      esac
      case $BETA in
        (true)    $STEAM_DIR/steamcmd.sh +login anonymous +force_install_dir ${INSTALL_DIR} +app_update ${APPID} -beta beta validate +quit;;
        (false)   $STEAM_DIR/steamcmd.sh +login anonymous +force_install_dir ${INSTALL_DIR} +app_update ${APPID} validate +quit;;
      esac
		fi
	;;
  "start-web")
    LogToManagerLog "Ran Start-web command.";
    if tmux new-session -d -s php 'php -S '"${IPAddress}"':'"${WEBPORT}"' -t '${SCRIPTPATH}'/avorion-manager/webroot '${SCRIPTPATH}'/avorion-manager/webroot/index.php' 2> /dev/null
    then
      DynamicEcho "starting PHP Server"

      if pidof php > /dev/null;
      then
        DynamicEcho "PHP Server started on server: http://${IPAddress}"':'"${WEBPORT}"
      else
        DynamicEcho "PHP Server Failed"
      fi
    else
      DynamicEcho "PHP Server Already started"

    fi
	;;
  "stop-web")
    LogToManagerLog "Ran Stop-web command.";
    tmux kill-session -t php
    DynamicEcho "PHP Server Stoped" "${RUN_BY}"
    if pidof php > /dev/null;
    then
      kill $(pidof php)
    fi
	;;
  "version")
    echo $VERSION
	;;
	"install")
    LogToManagerLog "Ran Install command.";
    echo ---------------------------------------------------------------------
    echo Welcome to Dirty Server Manager
    echo Version: $VERSION
    echo ---------------------------------------------------------------------
    echo Begining installation process...
    echo ''
    echo The folowing prompts can be changed in the future in ./manager-config.ini
    echo ''
    read -p "please enter the Galaxy Name for the server: [GalaxyName]"  GalaxyNameInput
    GalaxyNameInput=${GalaxyNameInput:-GalaxyName}
    echo Galaxy Name: $GalaxyNameInput
    echo ''
    read -p "please enter the Maximum Players for the server: [10]"  MaxPlayersInput
    MaxPlayersInput=${MaxPlayersInput:-10}
    echo Max Players: $MaxPlayersInput
    echo ''
    read -p "Would you like to run the server on the BETA version: [y/N]"  BetaInput
    BetaInput=${BetaInput:-n}
    if [[ $BetaInput =~ ^[Yy]$ ]]; then
      BetaInput=true
    else
      BetaInput=false
    fi
    echo Beta: $BetaInput
    echo ''
    read -p "Would you like the server to be public?: [Y/n]"  PublicServerInput
    PublicServerInput=${PublicServerInput:-y}
    if [[ $PublicServerInput =~ ^[Yy]$ ]]; then
      PublicServerInput=true
    else
      PublicServerInput=false
    fi
    echo Public: $PublicServerInput
    echo ''
    read -p "Would you like the server to be listed?: [Y/n]"  ListedServerInput
    ListedServerInput=${ListedServerInput:-y}
    if [[ $ListedServerInput =~ ^[Yy]$ ]]; then
      ListedServerInput=true
    else
      ListedServerInput=false
    fi
    echo Listed: $ListedServerInput
    echo ''
    read -p "Would you like everyone to start in the same start sector?: [Y/n]"  SameStartInput
    SameStartInput=${SameStartInput:-y}
    if [[ $SameStartInput =~ ^[Yy]$ ]]; then
      SameStartInput=true
    else
      SameStartInput=false
    fi
    echo Same Start Sector: $SameStartInput
    echo ''
    read -p "Port number for the server: [2700]"  PortInput
    PortInput=${PortInput:-2700}
    echo Max Players: $PortInput
    echo ''
    read -p "Would you like the server to automatically restart if the server crashes?: [Y/n]"  AutoCrashRestartInput
    AutoCrashRestartInput=${AutoCrashRestartInput:-y}
    if [[ $AutoCrashRestartInput =~ ^[Yy]$ ]]; then
      AutoCrashRestartInput=true
    else
      AutoCrashRestartInput=false
    fi
    echo Auto Crash Restart: $AutoCrashRestartInput
    echo ''
    read -p "Would you like the server to automatically restart twice a day? (Noon and Midnight server time): [Y/n]"  DailyRestartInput
    DailyRestartInput=${DailyRestartInput:-y}
    if [[ $DailyRestartInput =~ ^[Yy]$ ]]; then
      DailyRestartInput=true
    else
      DailyRestartInput=false
    fi
    echo Auto Daily Restart: $DailyRestartInput
    echo ''
    read -p "Admin steam id:"  AdminInput
    AdminInput=${AdminInput}
    if [ -z "$AdminInput" ]; then
      AdminInput=""
    else
      AdminInput=" --admin ${AdminInput}"
    fi
    if [ -z "$AdminInput" ]; then
      echo No admin id given, server will start without an admin.  Edit server.ini to add an admin.
    else
      echo Admin Steam ID: $AdminInput
    fi
    echo ''
    read -p "The IPAddress you want the web interface to run on: []"  IPAddressInput
    IPAddressInput=${IPAddressInput:-y}
    if [[ $IPAddressInput =~ ^[Yy]$ ]]; then
      IPAddressInput=$(hostname -I | awk '{print $1}')
    fi
    echo IPAddress to use: $IPAddressInput

    echo ''
    echo "Completed manager configuration, to make changes to these settings in the future edit file manager-config.ini"
    read -p "Press enter to continue with steam/avorion installation"
    echo ''
    echo "MAX_PLAYERS=${MaxPlayersInput}" > manager-config.ini
    echo "GALAXY=${GalaxyNameInput}" >> manager-config.ini
    echo ";http://wiki.avorion.net/index.php?title=Server"
    echo "PARAMS='--public ${PublicServerInput} --listed ${ListedServerInput} --same-start-sector ${SameStartInput}${AdminInput}'" >> manager-config.ini
    echo "PORT=${PortInput}" >> manager-config.ini
    echo ";Days to keep status.logs" >> manager-config.ini
    echo "LOG_ROTATION=10" >> manager-config.ini
    echo ";If the status check that runs every 5 minutes fails to get a response from the server it will automatically issue a restart command" >> manager-config.ini
    echo "AutoRestart=${AutoCrashRestartInput}" >> manager-config.ini
    echo ";Will restart the server at the MIDNIGHT and NOON SERVER time." >> manager-config.ini
    echo "DailyRestart=${DailyRestartInput}" >> manager-config.ini
    echo "BETA=${BetaInput}" >> manager-config.ini
    echo "WEBPORT=8080" >> manager-config.ini
    echo "IPAddress=${IPAddressInput}" >> manager-config.ini

    mkdir -p $STEAM_DIR
    wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
    tar -zxvf steamcmd_linux.tar.gz -C $STEAM_DIR
    $0 update
	;;
    *)
		DynamicEcho "available commands:\n           ${GREEN}start${NOCOLOR} server,\n           ${GREEN}stop${NOCOLOR} server,\n           ${GREEN}restart${NOCOLOR} server,\n           check server's ${GREEN}status${NOCOLOR},\n           check for ${GREEN}update${NOCOLOR}s,\n           ${GREEN}attach${NOCOLOR} to console,\n           show this ${GREEN}help${NOCOLOR},\n           ${GREEN}install${NOCOLOR} steamcmd,\n           ${GREEN}start-web${NOCOLOR} starts php server\n           ${GREEN}stop-web${NOCOLOR} Stops PHP server"  "${RUN_BY}"
    echo ""
    echo "To update Dirty-Server-Manager itself run this command:"
    echo "avorion-manager/UpdateManager.sh"
    echo ""
    echo "To install apache server run this command:"
    echo "./ApacheInstall.sh"
    echo ""
    echo "For both these commands be sure you run them from the same directory this manager file resides."
	;;
esac
